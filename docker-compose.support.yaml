
# Supporting services, like database that always must be online
version: '3.5'

services:
  mastodon_web:
    image: tootsuite/mastodon
    restart: unless-stopped
    env_file: .env.mastodon
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy=off localhost:3000/health || exit 1"]
    ports:
      - "127.0.0.1:7730:3000"
    depends_on:
      - database
      - redis
    volumes:
      - .docker/data/mastodon:/opt/mastodon/public/system/
  mastodon_streaming:
    image: tootsuite/mastodon
    restart: unless-stopped
    env_file: .env.mastodon
    command: node ./streaming
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1"]
    ports:
      - "127.0.0.1:7740:4000"
    depends_on:
      - database
      - redis
  mastodon_sidekiq:
    image: tootsuite/mastodon
    restart: unless-stopped
    env_file: .env.mastodon
    command: bundle exec sidekiq
    depends_on:
      - database
      - redis
    volumes:
      - .docker/data/mastodon:/opt/mastodon/public/system/
  synapse:
    image: "matrixdotorg/synapse:v1.23.1"
    restart: "unless-stopped"
    ports:
      - "127.0.0.1:18008:8008"
      - "127.0.0.1:18448:8448"
    volumes:
      - ".docker/data/im:/data"
    env_file:
      - '.env.im'
    depends_on:
      - redis
      - database
  # synapse_telegram:
  #   image: dock.mau.dev/tulir/mautrix-telegram:v0.9.0
  #   restart: "unless-stopped"
  #   ports:
  #     - 29317:29317
  #   volumes:
  #     - ".docker/data/synapse_telegram/:/data"
  #   depends_on:
  #     - synapse
  # synapse_discord:
  #   image: halfshot/matrix-appservice-discord:v1.0.0
  #   restart: "unless-stopped"
  #   ports:
  #     - '19005:9005'
  #   volumes:
  #     - ".docker/data/discord_synapse/:/data"
  #   depends_on:
  #     - synapse
  synapse_riot:
    image: "vectorim/element-web:latest"
    restart: "unless-stopped"
    ports:
      - "127.0.0.1:18010:80"
    volumes:
      - ".docker/data/synapse_riot/config.json:/app/config.json"
    depends_on:
      - synapse
  synapse_admin:
    image: awesometechnologies/synapse-admin:latest
    ports:
      - "127.0.0.1:18009:80"
    depends_on:
      - synapse
  # protonmail:
  #   image: macbury/protonmail:latest
  #   restart: unless-stopped
  #   volumes:
  #     - .docker/data/protonmail:/root
  transfer:
    image: dutchcoders/transfer.sh:latest
    ports:
      - "18031:8080"
    env_file:
      - '.env.transfer'
    restart: always
  ci:
    image: drone/drone:1.9.0
    env_file:
      - '.env.ci'
    restart: always
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - .docker/data/drone:/data
    ports:
      - "4282:80"
    depends_on:
      - git
  git:
    image: gitea/gitea:latest
    env_file:
      - '.env.git'
    restart: always
    volumes:
      - .docker/data/gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "3282:3000"
      - "2222:22"
    depends_on:
      - database
  rss-bridge:
    image: rssbridge/rss-bridge:latest
    dns:
      - 9.9.9.9
      - 149.112.112.112
    ports:
      - '59900:80'
  node-red:
    build: ./node-red/
    restart: unless-stopped
    dns:
      - 9.9.9.9
      - 149.112.112.112
    ports:
      - 51880:1880
    environment:
      - TZ=Europe/Warsaw
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    volumes:
      - .docker/data/node-red:/data
      - /mnt/Music:/music
  gotify:
    image: gotify/server:latest
    ports:
      - "0.0.0.0:5580:80"
    volumes:
      - .docker/data/gotify:/app/data
  redis:
    image: redis:4.0.10
    ports:
      - 6379:6379
    volumes:
      - .docker/data/redis:/data
  nextcloud:
    build: ./nextcloud/
    ports:
      - 4333:80
    env_file:
      - '.env.nextcloud'
    volumes:
      - .docker/data/nextcloud_next:/var/www/html
    depends_on:
      - database
      - redis
    healthcheck:
      test: [ "CMD", "curl", "http://localhost" ]
      timeout: 45s
      interval: 30s
      retries: 3
  influxdb:
    restart: unless-stopped
    image: influxdb:latest
    ports:
      - "0.0.0.0:18086:8086"
    volumes:
      - .docker/data/influxdb:/var/lib/influxdb
    env_file:
      - '.env.influxdb'
  database:
    image: postgres:9.6.19-alpine
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
    ports:
      - 0.0.0.0:4101:5432
    environment:
      PGDATA: /data
    env_file:
      - '.env.postgresql'
    volumes:
      - ./postgresql/:/docker-entrypoint-initdb.d/
      - .docker/data/postgresql:/data
  grafana:
    image: grafana/grafana:6.5.0
    restart: unless-stopped
    user: "472"
    env_file:
      - '.env.grafana'
      - '.env.influxdb'
      - '.env.local'
    environment:
      GF_SERVER_DOMAIN: "${HOME_ASSISTANT_DOMAIN}"
      GF_SERVER_ROOT_URL: "https://${HOME_ASSISTANT_DOMAIN}/grafana/"
    ports:
      - "127.0.0.1:4100:3000"
    volumes:
      - .docker/data/grafana:/var/lib/grafana
    depends_on:
      - influxdb
  esphome:
    image: esphome/esphome:latest
    volumes:
      - .docker/data/esphome:/config
      - /etc/localtime:/etc/localtime:ro
    network_mode: host
  monio:
    restart: unless-stopped
    image: macbury/mon.io:latest
    ports:
      - 14000:3000
    volumes:
      - .docker/data/monio/:/app/storage
    env_file:
      - .env.monio
    depends_on:
      - database
  smasher:
    restart: unless-stopped
    image: olxia172/checklist.smasher:latest
    ports:
      - 14001:3001
    env_file:
      - .env.smasher
    depends_on:
      - database
