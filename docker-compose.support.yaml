
# Supporting services, like database that always must be online
version: '3.5'

services:
  ci:
    image: drone/drone:1.9.0
    env_file:
      - '.env.ci'
    restart: always
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - .docker/data/drone:/data
    ports:
      - "4282:80"
    depends_on:
      - git
  ci_runner:
    image: drone/drone-runner-docker:1.4.0
    env_file:
      - '.env.ci_runner'
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - ci
  git:
    image: gitea/gitea:latest
    env_file:
      - '.env.git'
    restart: always
    volumes:
      - .docker/data/gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "3282:3000"
      - "2222:22"
    depends_on:
      - database
  rss-bridge:
    image: rssbridge/rss-bridge:latest
    dns:
      - 9.9.9.9
      - 149.112.112.112
    ports:
      - '59900:80'
  node-red:
    image: nodered/node-red:latest
    restart: unless-stopped
    dns:
      - 9.9.9.9
      - 149.112.112.112
    ports:
      - 51880:1880
    environment:
      - TZ=Europe/Warsaw
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    volumes:
      - .docker/data/node-red:/data
  grocy:
    image: linuxserver/grocy:latest
    ports:
      - '59000:80'
    volumes:
      - .docker/data/grocy2:/config
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Warsaw
  simple-login-crontab:
    image: simplelogin/app:1.0.0
    network_mode: host
    restart: unless-stopped
    depends_on:
      - database
    env_file:
      - '.env.simplelogin'
    volumes:
      - .docker/data/simple-login/keys/dkim.key:/dkim.key
      - .docker/data/simple-login/keys/dkim.pub.key:/dkim.pub.key
      - .env.simplelogin:/code/.env
    command: yacron -c /code/crontab.yml
  simple-login-email:
    image: simplelogin/app:1.0.0
    network_mode: host
    restart: unless-stopped
    ports:
      - "0.0.0.0:20381:20381"
    depends_on:
      - database
    env_file:
      - '.env.simplelogin'
    volumes:
      - .docker/data/simple-login/keys/dkim.key:/dkim.key
      - .docker/data/simple-login/keys/dkim.pub.key:/dkim.pub.key
      - .env.simplelogin:/code/.env
    command: python email_handler.py
  simple-login:
    image: simplelogin/app:1.0.0
    network_mode: host
    restart: unless-stopped
    ports:
      - "0.0.0.0:7777:7777"
    depends_on:
      - database
    env_file:
      - '.env.simplelogin'
    volumes:
      - .docker/data/simple-login/keys/dkim.key:/dkim.key
      - .docker/data/simple-login/keys/dkim.pub.key:/dkim.pub.key
      - .env.simplelogin:/code/.env
  gotify:
    image: gotify/server:latest
    ports:
      - "0.0.0.0:5580:80"
    volumes:
      - .docker/data/gotify:/app/data
  orion:
    build: ./orion/
    restart: unless-stopped
    ports:
      - "127.0.0.1:5500:5000"
      - "127.0.0.1:5501:8080"
    depends_on:
      - mysql
      - redis
  firefox:
    build: ./ff-sync/
    network_mode: host
    restart: unless-stopped
    env_file:
      - '.env.syncserver'
    environment:
      - SYNCSERVER_SQLURI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:4101/ffsync
    depends_on:
      - database
  redis:
    image: redis:4.0.10
    ports:
      - 6379:6379
    volumes:
      - .docker/data/redis:/data
  nextcloud:
    build: ./nextcloud/
    ports:
      - 4333:80
    env_file:
      - '.env.nextcloud'
    volumes:
      - .docker/data/nextcloud_next:/var/www/html
    depends_on:
      - database
      - redis
    healthcheck:
      test: [ "CMD", "curl", "http://localhost" ]
      timeout: 45s
      interval: 30s
      retries: 3
  mqtt:
    restart: unless-stopped
    image: eclipse-mosquitto:latest
    ports:
      - 0.0.0.0:4105:1883
    volumes:
      - .docker/data/mosquitto:/mosquitto/data
      - .docker/log/mosquitto.log:/mosquitto/log/mosquitto.log
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
  influxdb:
    restart: unless-stopped
    image: influxdb:latest
    ports:
      - "0.0.0.0:18086:8086"
    volumes:
      - .docker/data/influxdb:/var/lib/influxdb
    env_file:
      - '.env.influxdb'
  database:
    image: postgres:9.6.19-alpine
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
    ports:
      - 0.0.0.0:4101:5432
    environment:
      PGDATA: /data
    env_file:
      - '.env.postgresql'
    volumes:
      - ./postgresql/:/docker-entrypoint-initdb.d/
      - .docker/data/postgresql:/data
  mysql:
    image: mysql:latest
    env_file:
      - '.env.mysql'
    volumes:
      - .docker/data/mysql:/var/lib/mysql
  grafana:
    image: grafana/grafana:6.5.0
    restart: unless-stopped
    user: "472"
    env_file:
      - '.env.grafana'
      - '.env.influxdb'
      - '.env.local'
    environment:
      GF_SERVER_DOMAIN: "${HOME_ASSISTANT_DOMAIN}"
      GF_SERVER_ROOT_URL: "https://${HOME_ASSISTANT_DOMAIN}/grafana/"
    ports:
      - "127.0.0.1:4100:3000"
    volumes:
      - .docker/data/grafana:/var/lib/grafana
    depends_on:
      - influxdb

  esphome:
    image: esphome/esphome:latest
    volumes:
      - .docker/data/esphome:/config
      - /etc/localtime:/etc/localtime:ro
    network_mode: host
  monio:
    restart: unless-stopped
    image: macbury/mon.io:latest
    ports:
      - 14000:3000
    volumes:
      - .docker/data/monio/:/app/storage
    env_file:
      - .env.monio
    depends_on:
      - database
  smasher:
    restart: unless-stopped
    image: olxia172/checklist.smasher:latest
    ports:
      - 14001:3001
    env_file:
      - .env.smasher
    depends_on:
      - database
